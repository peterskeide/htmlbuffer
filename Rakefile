require "yaml"

def notice
  "// This file was generated by the 'generate' Rake task\n\n"
end

def package
  "package htmlbuffer\n\n"
end

def write_header(file)
  file << notice
  file << package
end

def create_elements_go_file(elements)
  elements_go_file = File.open("gen_elements.go", "w") do |f|
    write_header(f)

    elements.each do |el|
      func = <<FUNC
func (b *HtmlBuffer) #{el.capitalize}(attrs Attrs, innerHtml func()) {
\tb.WriteNormalElement("#{el}", attrs, innerHtml)
}

FUNC

      f << func

      func_ = <<FUNC
func (b *HtmlBuffer) #{el.capitalize}_(innerHtml func()) {
\tb.WriteNormalElement("#{el}", nil, innerHtml)
}

FUNC

      f << func_
    end
  end
end

def create_void_elements_go_file(elements)
  void_elements_go_file = File.open("gen_void_elements.go", "w") do |f|
    write_header(f)

    elements.each do |el|
      func = <<FUNC
func (b *HtmlBuffer) #{el.capitalize}(attrs Attrs) {
\tb.WriteVoidElement("#{el}", attrs)
}

FUNC

      f << func

      func_ = <<FUNC
func (b *HtmlBuffer) #{el.capitalize}_() {
\tb.WriteVoidElement("#{el}", nil)
}

FUNC

      f << func_
    end
  end
end

def create_input_elements_go_file(input_types)
  input_elements_go_file = File.open("gen_input_elements.go", "w") do |f|
    write_header(f)

    input_types.each do |type|
      func = <<FUNC
func (b *HtmlBuffer) #{method_name_from_type(type)}(attrs Attrs) {
\tattrs["type"] = "#{type}"
\tb.Input(attrs)
}

FUNC

      f << func

      func_ = <<FUNC
func (b *HtmlBuffer) #{method_name_from_type(type)}_() {
\tb.Input(Attrs{"type": "#{type}"})
}

FUNC

      f << func_
    end
  end
end

def method_name_from_type(type)
  type.split("-").map { |str| str.capitalize }.join("") << "Input"
end

def create_text_only_elements_go_file(elements)
  text_only_elements_go_file = File.open("gen_text_only_elements.go", "w") do |f|
    write_header(f)

    elements.each do |el|
      func = <<FUNC
func (b *HtmlBuffer) #{el.capitalize}(attrs Attrs, text string) {
\tb.WriteNormalElement("#{el}", attrs, b.TextF(text))
}

FUNC

      f << func

      func_ = <<FUNC
func (b *HtmlBuffer) #{el.capitalize}_(text string) {
\tb.WriteNormalElement("#{el}", nil, b.TextF(text))
}

FUNC

      f << func_
    end
  end
end

desc "Generate go file with elements"
task :generate do
  elements = YAML.load_file("elements.yml")
  create_elements_go_file(elements["non-void"])
  create_void_elements_go_file(elements["void"])
  create_input_elements_go_file(elements["inputs"])
  create_text_only_elements_go_file(elements["text"])
end
