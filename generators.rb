class Generator
  def generate(elements)
    go_file = File.open(self.filename, "w") do |f|
      write_header(f)

      elements.each do |el|
        f << self.methods_for(el)
      end
    end
  end

  protected

  def method_name(element)
    element.split("-").map { |str| str.capitalize }.join("")
  end

  private

  def write_header(file)
    file << notice
    file << package
  end

  def notice
    "// This file was generated by the 'generate' Rake task\n\n"
  end

  def package
    "package htmlwriter\n\n"
  end
end

class NormalElementGenerator < Generator
  def filename
    "gen_elements.go"
  end

  def methods_for(element)
    methods = ""

    methods << "func (w *HtmlWriter) #{self.method_name(element)}(attrs Attrs, innerHtml func()) {\n"
    methods << "\tw.WriteNormalElement(\"#{element}\", attrs, innerHtml)\n"
    methods << "}\n\n"

    methods << "func (w *HtmlWriter) #{self.method_name(element)}_(innerHtml func()) {\n"
    methods << "\tw.WriteNormalElement(\"#{element}\", nil, innerHtml)\n"
    methods << "}\n\n"

    methods
  end
end

class VoidElementGenerator < Generator
  def filename
    "gen_void_elements.go"
  end

  def methods_for(element)
    methods = ""

    methods << "func (w *HtmlWriter) #{self.method_name(element)}(attrs Attrs) {\n"
    methods << "\tw.WriteVoidElement(\"#{element}\", attrs)\n"
    methods << "}\n\n"

    methods << "func (w *HtmlWriter) #{self.method_name(element)}_() {\n"
    methods << "\tw.WriteVoidElement(\"#{element}\", nil)\n"
    methods << "}\n\n"

    methods
  end
end

class TextOnlyElementGenerator < Generator
  def filename
    "gen_text_only_elements.go"
  end

  def methods_for(element)
    methods = ""

    methods << "func (w *HtmlWriter) #{self.method_name(element)}(attrs Attrs, formatStr string, a ...interface{}) {\n"
    methods << "\tw.WriteNormalElement(\"#{element}\", attrs, w.RawTextF(formatStr, a...))\n"
    methods << "}\n\n"

    methods << "func (w *HtmlWriter) #{self.method_name(element)}_(formatStr string, a ...interface{}) {\n"
    methods << "\tw.WriteNormalElement(\"#{element}\", nil, w.RawTextF(formatStr, a...))\n"
    methods << "}\n\n"

    methods
  end
end

class InputElementGenerator < Generator
  def filename
    "gen_input_elements.go"
  end

  def methods_for(type)
    methods = ""

    methods << "func (w *HtmlWriter) #{self.method_name(type)}Input(attrs Attrs) {\n"
    methods << "\tattrs[\"type\"] = \"#{type}\"\n"
    methods << "\tw.Input(attrs)\n"
    methods << "}\n\n"

    methods << "func (w *HtmlWriter) #{self.method_name(type)}Input_() {\n"
    methods << "\tw.Input(Attrs{\"type\": \"#{type}\"})\n"
    methods << "}\n\n"

    methods
  end
end
